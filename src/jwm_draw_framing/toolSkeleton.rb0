## Draw Framing v0.6 rewrite from scratch
## D:\Documents\GitHub\draw_framing\src\draw_framing\draw_framing.rb
## Name: Draw Framing Tool
## Sketchup Extension plugin
## Tool to help draw Timber Frames using standard (UK) softwood timber sizes and custom sizes
## Author John McClenahan
## Date May 2012ff
## Adapted from CLineTool.rb by Jim Foltz
##   which in turn is adapted from
# LineTool Copyright 2005-2007, Google, Inc.

# The software (linetool.rb) was provided as an example of using the Ruby interface
# to SketchUp.

# License: The MIT License (MIT)

# THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

#-----------------------------------------------------------------------------

require "sketchup.rb"

# Wrap everything in a module to create a unique namespace
module JWM

class DrawFraming
#------------------
  def initialize
    puts "initialize called v0.6"
    cursor = File.join(File.dirname(__FILE__), "framing_cursor.png")
    cursor_id = nil
    if cursor
    # Create the cursor with the hot spot at top left (0,0) of image
     @cursor_id = UI.create_cursor(cursor, 0, 0)
    end
  end # initialize

#------------------
  def activate
    puts "activate called"
    @state = 0 # Reset to starting state  
  end # activate

#------------------
  def deactivate view
    puts "deactivate called"
  end # deactivate

#------------------
  def onSetCursor
#    puts "setCursor called"
    Set the cursor to selected instance variable ID
    UI.set_cursor @cursor_id
  end # setCursor
  
#------------------
  def onMouseMove flags, x, y, view
    case @state  
    when 0 # waiting for first pick point
#     puts "onMouseMove called: @state = 0"
    when 1 # first point picked, waiting for second pick
#      puts "onMouseMove called: @state = 1"
    when 2 # waiting for third pick
#      puts "onMouseMove called: @state = 2"
    end
  end # onMouseMove
  
#------------------
  def onLButtonDown flags, x, y, view
    puts "onLbuttonDown called"
  end # onLButtonDown
  
#------------------
  def onLButtonUp flags, x, y, view
    puts "onLButtonUp called"
  end # onLButtonUp

#------------------
  def onRButtonDown flags, x, y, view
    puts "onRButtonDown called"
#		getMenu()
	end

#------------------
  def onRButtonUp flags, x, y, view
    puts "onRButtonUp called"
    # does nothing in this Tool
	end
   
#------------------
  def onKeyDown key, repeat, flags, view
    puts "onKeyDown called"
  end
   
#------------------
  def onKeyUp key, repeat, flags, view
    
  end
  
#------------------
  def onUserText text, view
    puts "onUserText called"
  end
  
#------------------
  def draw view
      puts "draw called"
  end
  
#------------------
	# onCancel  is called when the user hits the escape key
	def onCancel flag, view
      puts "onCancel called"
		self.reset(view)
	end
  
#------------------
	# The following methods are not directly called from SketchUp.	They are
	# internal methods that are used to support the other methods in this class.

	# Reset the tool back to its initial state
	def reset(view)
    puts "reset called" 
  
  end
  
  def create_geometry(p1, p2, view)
    puts "create_geometry called"
  end
  
#------------------
  def suspend(view)
    puts "suspend called"
  end
  
#------------------
  def resume(view)
    puts "resume called"
  end # resume

#------------------
## Draw the geometry
	def draw_geometry(pt1, pt2, view)
      puts "draw_geometry called"
  end

#------------------
	def load_opts
      puts "load_opts called"
  end
  
#------------------
	def save_opts
      puts "save_opts called"
  end

#------------------

 def getMenu(menu)
   puts "getMenu called"
	menu.add_item("Timber size (nominal)") { puts("Select timber size from context menu") } 
	menu.add_separator
	#puts @n_size.inspect
	#puts @c_menu.inspect
	# @n_size.each_index {|i|
			# menu.add_item(@n_size[i][0]) {@chosen_size = i; @cursor_text = "\n\n" + @n_size[i][0]; self.activate}}
 end
 
#------------------
# Add a translation vector to a transformation
 	def translate( *args ) 
  # From Martin Rinehart 'Edges to Rubies' chapter 15
  # May be called with a transformation and a vector, 
  # or with a transformation and r, g, b values.

    trans = args[0]
    if args.length == 2
        vec = args[1]
        r = vec[0]; g = vec[1]; b = vec[2] 
    else
        r = args[1]; g = args[2]; b = args[3] 
    end
    arr = trans.to_a()
    arr[12] += r; arr[13] += g; arr[14] += b 
    return Geom::Transformation.new( arr )
    
	end # of translate()

end # class DrawFraming
end # module JWM

#------------------
# Load new drawing tool
unless file_loaded?(__FILE__)
	cmd = UI::Command.new("Timber Frame") {Sketchup.active_model.select_tool(JWM::DrawFraming.new)}
	my_dir	 = File.dirname(File.expand_path(__FILE__))
	cmd.small_icon = File.join(my_dir, "framing_icon_sm.png")
	cmd.large_icon = File.join(my_dir, "framing_icon_lg.png")
	cmd.tooltip	= "Timber Frame"
	cmd.menu_text	= "Timber Frame"

	menu = UI.menu("Draw")
	menu.add_item(cmd)
	
	## Add tool-specific context menu 
	tb = UI.toolbar("Timber Frame")
	tb.add_item(cmd)
	if tb.get_last_state == TB_VISIBLE
	UI.start_timer(0.1, false) { tb.restore }
	elsif tb.get_last_state == TB_NEVER_SHOWN
	tb.show
	end
end
file_loaded(__FILE__)